if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif
if $_system_name == 'Debian'
  set t_Co=256
endif

" ------------------------------------------
" Setting up NeoBundle
" ------------------------------------------

set nocompatible " be iMproved

if has('vim_starting')
  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

"-------------------------------------------
 
if has("gui_macvim")
  set guioptions-=T "if using a GUI Version
endif

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Rails related
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-haml'
Plugin 'vim-ruby/vim-ruby'
Plugin 'slim-template/vim-slim.git'
Plugin 'tpope/vim-endwise'
Plugin 'kchmck/vim-coffee-script'
Plugin 'ecomba/vim-ruby-refactoring'
" Workflow
Plugin 'roman/golden-ratio'
Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-surround'
Plugin 'wikitopian/hardmode'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-dispatch'
Plugin 'airblade/vim-gitgutter'
" css
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'
" GIT
Plugin 'tpope/vim-fugitive'
" Elixir/Erlang
Plugin 'elixir-lang/vim-elixir'
Plugin 'avdgaag/vim-phoenix'

Plugin 'rhysd/vim-crystal'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on " required!

" -----------------------
" BASIC VIM CONFIGURATION
" -----------------------

" Plugins used:
" rails, autoclose, endwise

filetype on  " Automatically detect file types.
set nocompatible
set nobackup
syntax enable

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set autoindent
set smarttab
set expandtab
set nocp incsearch
set cinwords=if,else,while,do,for,switch,case

set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off

" Visual
set showmatch  " Show matching brackets.

set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent (local to buffer)

if has("autocmd")
  filetype indent on
endif

let mapleader = ","

" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
vnoremap <Leader>sl d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>

" http://vimcasts.org/episodes/tidying-whitespace/"
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre *.rb,*.erb,*.py,*.js,*.es6,*.haml,*.coffee,*.rake,*.md,*.ex,*.exs,*.eex :call <SID>StripTrailingWhitespaces()

function! <SID>ArglistAddFrozenStringLiteralMagicComment()
  set hidden
  silent argdo 0 | norm O# frozen_string_literal = true
endfunction

map <Leader>afs :call <SID>ArglistAddFrozenStringLiteralMagicComment()<CR>

autocmd FileType javascript setlocal shiftwidth=4 tabstop=4
autocmd BufRead *.es6 set filetype=javascript
autocmd BufRead *.ex,*.exs set filetype=elixir

" -------------------------------------------------
" TDD related stuff
function! RSpecSpring()
  execute("!spring rspec " . expand("%p"))
endfunction

function! RunCurrentTestCase(command)
  execute("!" . a:command . " " . expand("%p") . ":" . line("."))
endfunction

" TODO Can I infer if spring is available? Is it desired to always run via
" spring if I could?
map <Leader>sr :call RSpecSpring()<CR>
map <Leader>SR :call RunCurrentTestCase("spring rspec")<CR>

" Bind t (entire file) and T (current line) to running tests depending on
" buffer type (eg. minitest, rspec or Mix test
autocmd BufRead *_test.rb map <Leader>t :w\|:!ruby -Itest %<CR>
autocmd BufRead *_spec.rb map <Leader>t :w\|:!rspec %<CR>
autocmd BufRead *_spec.rb map <Leader>T :w\|:call RunCurrentTestCase("rspec")<CR>
autocmd BufRead *_test.exs map <Leader>t :w\|:!mix test %<CR>
autocmd BufRead *_test.exs map <Leader>T :w\|:call RunCurrentTestCase("mix test")<CR>

let g:rails_projections = {
      \  "app/services/*.rb": {
      \    "command": "service",
      \    "template": "# frozen_string_literal: true\nclass %S\nend",
      \    "test": [ "spec/services/%s_spec.rb" ],
      \    "alternate": "spec/services/%s_spec.rb" ,
      \    "affinity": "model"
      \  },
      \  "app/middleware/*.rb": {
      \    "command": "middleware",
      \    "template":
      \      "# frozen_string_literal: true\nclass %S < Struct.new(:app)\n\n  def call(env)\n    app.call(env)\n  end\n\nend",
      \      "test": [
      \        "spec/middleware/%s_spec.rb"
      \      ]
      \  },
      \  "app/presenters/*.rb": {
      \    "command": "presenter",
      \    "template": "# frozen_string_literal: true\nclass %S < BasePresenter\nend",
      \    "test": [ "spec/presenters/%s_spec.rb" ],
      \    "affinity": "model"
      \  },
      \  "lib/base_presenter.rb": {"command": "presenter"},
      \  "spec/services/*_spec.rb": {
      \    "command": "servicetest",
      \    "template":
      \      "# frozen_string_literal: true\nRSpec.describe %S do\n\n  describe \"its constructor\" do\n    pending 'FIXME: implement this example'\n  end\n\nend",
      \    "alternate": "app/services/%s.rb",
      \    "keywords": "describe context subject skip pending"
      \  }
      \}

" -------------------------------------------------

" TODO move customisation into carpschool colorscheme
colorscheme carpschool
set colorcolumn=233
hi ColorColumn ctermfg=NONE ctermbg=234 cterm=NONE
hi TabLineFill ctermfg=Black ctermbg=White
hi TabLine ctermfg=LightBlue ctermbg=Black
hi TabLineSel ctermfg=White ctermbg=Blue

map <Leader>h <Esc>:call ToggleHardMode()<CR>

map <Leader>r :w\|:!ruby %<CR>
map <Leader>gs :Gstatus<CR>

" repeat last command for visual selection by pressing .
xnoremap . :norm.<CR>

" OS X has modelines disabled by default?
set modelines=5

" I keep typing :W when I meant :w
cnoreabbrev <expr> W getcmdtype()==':'&&getcmdline()=~#'^W'?'w':'W'

let g:vim_markdown_folding_level = 3
let g:vim_markdown_frontmatter = 1
