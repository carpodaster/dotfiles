" vim:fdm=marker

" Platform specific configuration {{{
if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif
if $_system_name == 'Debian'
  set t_Co=256
endif

if has("gui_macvim")
  set guioptions-=T "if using a GUI Version
endif

" OS X has modelines disabled by default?
set modelines=5
" }}}

" Basic Vim configuration {{{
filetype on  " Automatically detect file types.
set nocompatible
set nobackup
syntax enable
set wildmenu

if has("autocmd")
  filetype indent on
endif

let mapleader = ","
" }}}

" Plugins: BEGIN DEFINITION {{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" }}}

" Plugins: Rails related {{{
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-haml'
Plugin 'vim-ruby/vim-ruby'
Plugin 'slim-template/vim-slim.git'
Plugin 'tpope/vim-endwise'
Plugin 'kchmck/vim-coffee-script'
Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'ngmy/vim-rubocop'
" }}}

" Plugins: General or workflow related {{{
Plugin 'tpope/vim-fugitive'
Plugin 'tomtom/tcomment_vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-surround'
Plugin 'roman/golden-ratio'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-dispatch'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'janko-m/vim-test'
Plugin 'joker1007/vim-ruby-heredoc-syntax'
" }}}

" Plugins: Elixir/Erlang related {{{
Plugin 'elixir-lang/vim-elixir'
Plugin 'avdgaag/vim-phoenix'
" }}}

" Plugins: Other languages {{{
Plugin 'hail2u/vim-css3-syntax'
Plugin 'groenewege/vim-less'
Plugin 'rhysd/vim-crystal'
" }}}

" Plugins: END DEFINITION {{{
" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on " required!
" }}}

" Formatting and indentation {{{
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set si " smartindent (local to buffer)
set ai " Automatically set the indent of a new line (local to buffer)
set shiftwidth=2  " Tabs under smart indent
set smarttab
set expandtab
set nocp incsearch
set cinwords=if,else,while,do,for,switch,case

set ruler      " Ruler on
set nu         " Line numbers on
set nowrap     " Line wrapping off
set showmatch  " Show matching brackets.
" }}}

" Custom functions {{{
" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
vnoremap <Leader>sl d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>

" http://vimcasts.org/episodes/tidying-whitespace/"
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre *.rb,*.erb,*.py,*.js,*.es6,*.haml,*.coffee,*.rake,*.ex,*.exs,*.eex :call <SID>StripTrailingWhitespaces()

function! <SID>ArglistAddFrozenStringLiteralMagicComment()
  set hidden
  silent argdo 0 | norm O# frozen_string_literal: true
endfunction

function! <SID>AddFrozenStringLiteralMagicComment()
  let l = line(".")
  let c = col(".")
  execute "norm gg"
  execute "norm O# frozen_string_literal: true"
  call cursor(l+1, c)
endfunction

function! ElixirPipeIn()
  let l = line(".")
  let c = col(".")
  execute "norm 0w I|> "
  execute "norm =="
  call cursor(l, c)
endfunction

" TDD related stuff

function! <SID>RSpecRunner()
  if !exists("g:rspec_runner#cmd")
    call <SID>rspec_runner_config()
  endif
  execute("AsyncRun -save=1 " . g:rspec_runner#cmd . " " . expand("%p"))
endfunction

function! RunCurrentTestCase(command)
  " Special treatment for Rails' spring:
  if a:command == "rspec" && exists("g:rspec_runner#cmd")
    let l:command = g:rspec_runner#cmd
  else
    let l:command = a:command
  end
  execute("AsyncRun -save=1 " . l:command . " " . expand("%p") . ":" . line("."))
  copen
endfunction

" Auto-detect spring
function! <SID>rspec_runner_config()
  if filereadable('bin/spring')
    let g:rspec_runner#cmd = 'bin/spring rspec'
  else
    let g:rspec_runner#cmd = 'rspec'
  endif
endfunction
autocmd User BufEnterRails call <SID>rspec_runner_config()
" }}}

map <Leader>afs :call <SID>ArglistAddFrozenStringLiteralMagicComment()<CR>

autocmd FileType javascript setlocal shiftwidth=4 tabstop=4
autocmd BufRead *.es6 set filetype=javascript
autocmd BufRead *.ex,*.exs set filetype=elixir
autocmd FileType ruby map <Leader>fs :call <SID>AddFrozenStringLiteralMagicComment()<CR>
autocmd BufRead mix.exs map <Leader>dg :!mix deps.get<CR>

" -------------------------------------------------

" Bind t (entire file) and T (current line) to running tests depending on
" buffer type (eg. minitest, rspec or Mix test).
autocmd BufRead *_test.rb map <Leader>t :w\|:!ruby -Itest %<CR>
autocmd BufRead *_spec.rb map <Leader>t :call <SID>RSpecRunner()<CR>
autocmd BufRead *_spec.rb map <Leader>tt :w\|:!rspec %<CR>
autocmd BufRead *_spec.rb map <Leader>T :call RunCurrentTestCase("rspec")<CR>
autocmd BufRead *_test.exs map <Leader>t :AsyncRun mix test %<CR>
autocmd BufRead *_test.exs map <Leader>tt :w\|:! mix test %<CR>
autocmd BufRead *_test.exs map <Leader>T :call RunCurrentTestCase("mix test")<CR>

" Projections: Rails {{{
let g:rails_projections = {
      \  "app/services/*.rb": {
      \    "command": "service",
      \    "template": "# frozen_string_literal: true\nclass {camelcase|capitalize|colons}\nend",
      \    "test": [ "spec/services/{}_spec.rb" ],
      \    "alternate": "spec/services/{}_spec.rb" ,
      \    "affinity": "model"
      \  },
      \  "app/middleware/*.rb": {
      \    "command": "middleware",
      \    "template":
      \      "# frozen_string_literal: true\nclass {camelcase|capitalize|colons} < Struct.new(:app)\n\n  def call(env)\n    app.call(env)\n  end\n\nend",
      \      "test": [
      \        "spec/middleware/{}_spec.rb"
      \      ]
      \  },
      \  "app/presenters/*.rb": {
      \    "command": "presenter",
      \    "template": "# frozen_string_literal: true\nclass {camelcase|capitalize|colons} < BasePresenter\nend",
      \    "test": [ "spec/presenters/{}_spec.rb" ],
      \    "affinity": "model"
      \  },
      \  "lib/base_presenter.rb": {"command": "presenter"},
      \  "spec/services/*_spec.rb": {
      \    "command": "servicetest",
      \    "template":
      \      "# frozen_string_literal: true\nRSpec.describe {camelcase|capitalize|colons} do\n\n  describe 'its constructor' do\n    pending 'FIXME: implement this example'\n  end\n\nend",
      \    "alternate": "app/services/{}.rb",
      \    "keywords": "describe context subject skip pending"
      \  },
      \  "spec/support/shared_examples/*.rb": {
      \    "command": "sharedexample",
      \    "template": "# frozen_string_literal: true\nRSpec.shared_examples_for '{blank}' do\nend"
      \  },
      \  "spec/support/shared_contexts/*.rb": {
      \    "command": "sharedcontext",
      \    "template": "# frozen_string_literal: true\nRSpec.shared_context '{blank}' do\nend"
      \  }
      \}
" }}}

" Colorscheme {{{
" TODO move customisation into carpschool colorscheme
colorscheme carpschool
set colorcolumn=233
hi ColorColumn ctermfg=NONE ctermbg=234 cterm=NONE
hi TabLineFill ctermfg=Black ctermbg=White
hi TabLine ctermfg=LightBlue ctermbg=Black
hi TabLineSel ctermfg=White ctermbg=Blue

au BufReadPost quickfix  setlocal modifiable
      \ | hi TestOk  ctermfg=green
      \ | hi TestErr ctermfg=red
      \ | syn match TestOk  "0 failures"
      \ | syn match TestErr "\([1-9]\+\|[0-9]\*\) \(failure|error\)[s]\?"
      \ | silent exe 'g/^/s//\=line(".")." "/'
      \ | setlocal nomodifiable
" }}}

" Close qf with a simple q
autocmd FileType qf map <buffer> q :cclose<CR>

map <Leader>r :w\|:!ruby %<CR>
map <Leader>gs :Gstatus<CR>
map <Leader>gp :call ElixirPipeIn()<CR>

" repeat last command for visual selection by pressing .
xnoremap . :norm.<CR>

" I keep typing :W when I meant :w
cnoreabbrev <expr> W getcmdtype()==':'&&getcmdline()=~#'^W'?'w':'W'

let g:vim_markdown_folding_level = 3
let g:vim_markdown_frontmatter = 1
let g:airline#extensions#tabline#enabled = 0
" let g:airline#extensions#tabline#show_buffers = 0
" let g:airline#extensions#tabline#show_tab_type = 1
" let g:airline#extensions#tabline#show_close_button = 0
let g:airline_section_error = airline#section#create_left(['%{g:asyncrun_status}'])
let g:asyncrun_exit = "if g:asyncrun_code != 0 | copen | endif"

set laststatus=2 " For vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = "papercolor"
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#extensions#branch#format = 2
let g:airline#extensions#syntastic#enabled = 1
