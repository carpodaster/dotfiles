if $COLORTERM == 'gnome-terminal'
  set t_Co=256
endif

" ------------------------------------------
" Setting up Vundle - the vim plugin bundler
" ------------------------------------------

let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')

if !filereadable(vundle_readme)
  echo "Installing Vundle.."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let iCanHazVundle=0
endif

"-------------------------------------------
 
if has("gui_macvim")
  set guioptions-=T "if using a GUI Version
endif

"---------------
" VUNDLE CONFIG
"---------------

set nocompatible " be iMproved
filetype off " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Rails related
Bundle 'tpope/vim-rails.git'
Bundle 'thoughtbot/vim-rspec'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-endwise'
Bundle 'kchmck/vim-coffee-script'
" Colorscheme
Bundle '29decibel/codeschool-vim-theme'
" Workflow
Bundle 'roman/golden-ratio'
Bundle 'tomtom/tcomment_vim'
Bundle 'scrooloose/syntastic'
Bundle 'godlygeek/tabular'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-surround'
Bundle 'wikitopian/hardmode'
Bundle 'benmills/vimux'
Bundle 'jingweno/vimux-zeus'
" css
Bundle 'hail2u/vim-css3-syntax'
Bundle 'groenewege/vim-less'
" GIT
Bundle 'tpope/vim-fugitive'

filetype plugin indent on " required!

" -----------------------
" BASIC VIM CONFIGURATION
" -----------------------

" Plugins used:
" rails, autoclose, endwise

colorscheme codeschool

filetype on  " Automatically detect file types.
set nocompatible
set nobackup
syntax enable

" Formatting (some of these are for coding in C and C++)
set ts=2  " Tabs are 2 spaces
set bs=2  " Backspace over everything in insert mode
set shiftwidth=2  " Tabs under smart indent
set autoindent
set smarttab
set expandtab
set nocp incsearch
set cinwords=if,else,while,do,for,switch,case

set ruler  " Ruler on
set nu  " Line numbers on
set nowrap  " Line wrapping off

" Visual
set showmatch  " Show matching brackets.

set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent (local to buffer)

if has("autocmd")
  filetype indent on
endif

let mapleader = ","

" http://stackoverflow.com/questions/1327978/sorting-words-not-lines-in-vim
vnoremap <Leader>sl d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>

" http://vimcasts.org/episodes/tidying-whitespace/"
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre *.rb,*.erb,*.py,*.js,*.haml,*.coffee,*.rake,*.md :call <SID>StripTrailingWhitespaces()
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4

" -------------------------------------------------
" Ruby TDD related stuff
function! RSpecCurrent()
  execute("!rspec " . expand("%p") . ":" . line("."))
endfunction

function! RSpecZeus()
  execute("!zeus rspec " . expand("%p"))
endfunction

function! RSpecZeusLine()
  execute("!zeus rspec " . expand("%p") . ":" . line("."))
endfunction

" TODO: check if it needs to be run with rspec or ruby -Itest
map <Leader>t :w\|:!rspec %<CR>
" mt, think 'minitest'
map <Leader>mt :w\|:!ruby -Itest %<CR>

map <Leader>T :call RSpecCurrent()<CR>
map <Leader>zr :call RSpecZeus()<CR>
map <Leader>ZR :call RSpecZeusLine()<CR>


let g:rails_projections = {
      \  "app/services/*.rb": {
      \    "command": "service",
      \    "template":
      \      "class %S\nend",
      \      "test": [
      \        "spec/services/%s_spec.rb"
      \      ]
      \  },
      \  "app/middleware/*.rb": {
      \    "command": "middleware",
      \    "template":
      \      "class %S < Struct.new(:app)\n\n  def call(env)\n    app.call(env)\n  end\n\nend",
      \      "test": [
      \        "spec/middleware/%s_spec.rb"
      \      ]
      \  },
      \  "app/presenters/*.rb": {
      \    "command": "presenter",
      \    "template":
      \      "class %S < BasePresenter\nend",
      \      "test": [
      \        "spec/presenters/%s_spec.rb"
      \      ]
      \  },
      \  "lib/base_presenter.rb": {"command": "presenter"}
      \}

" -------------------------------------------------

set colorcolumn=233
hi ColorColumn ctermfg=NONE ctermbg=234 cterm=NONE

hi TabLineFill ctermfg=Black ctermbg=White
hi TabLine ctermfg=LightBlue ctermbg=Black
hi TabLineSel ctermfg=White ctermbg=Blue

map <Leader>h <Esc>:call ToggleHardMode()<CR>

map <Leader>r :w\|:!ruby %<CR>

" repeat last command for visual selection by pressing .
xnoremap . :norm.<CR>
